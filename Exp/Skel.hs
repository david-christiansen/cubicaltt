module Exp.Skel where

-- Haskell module generated by the BNF converter

import Exp.Abs
import Exp.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transAIdent :: AIdent -> Result
transAIdent x = case x of
  AIdent string -> failure x
transCIdent :: CIdent -> Result
transCIdent x = case x of
  CIdent string -> failure x
transHoleIdent :: HoleIdent -> Result
transHoleIdent x = case x of
  HoleIdent string -> failure x
transModule :: Module -> Result
transModule x = case x of
  Module aident imps decls -> failure x
transImp :: Imp -> Result
transImp x = case x of
  Import aident -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  DeclDef aident teles exp expwhere -> failure x
  DeclData aident teles labels -> failure x
  DeclHData aident teles labels -> failure x
  DeclSplit aident teles exp branchs -> failure x
  DeclUndef aident teles exp -> failure x
  DeclMutual decls -> failure x
  DeclOpaque aident -> failure x
  DeclTransparent aident -> failure x
  DeclTransparentAll -> failure x
transExpWhere :: ExpWhere -> Result
transExpWhere x = case x of
  Where exp decls -> failure x
  NoWhere exp -> failure x
transExp :: Exp -> Result
transExp x = case x of
  Let decls exp -> failure x
  Lam pteles exp -> failure x
  PLam aidents exp -> failure x
  Split exp branchs -> failure x
  Fun exp1 exp2 -> failure x
  Pi pteles exp -> failure x
  Sigma pteles exp -> failure x
  AppFormula exp formula -> failure x
  App exp1 exp2 -> failure x
  PathP exp1 exp2 exp3 -> failure x
  Comp exp1 exp2 system -> failure x
  Trans exp1 exp2 -> failure x
  Fill exp1 exp2 system -> failure x
  Glue exp system -> failure x
  GlueElem exp system -> failure x
  UnGlueElem exp system -> failure x
  Id exp1 exp2 exp3 -> failure x
  IdPair exp system -> failure x
  IdJ exp1 exp2 exp3 exp4 exp5 exp6 -> failure x
  Fst exp -> failure x
  Snd exp -> failure x
  Pair exp exps -> failure x
  Var aident -> failure x
  PCon aident exp -> failure x
  U -> failure x
  Hole holeident -> failure x
transDir :: Dir -> Result
transDir x = case x of
  Dir0 -> failure x
  Dir1 -> failure x
transSystem :: System -> Result
transSystem x = case x of
  System sides -> failure x
transFace :: Face -> Result
transFace x = case x of
  Face aident dir -> failure x
transSide :: Side -> Result
transSide x = case x of
  Side faces exp -> failure x
transFormula :: Formula -> Result
transFormula x = case x of
  Disj formula1 formula2 -> failure x
  Conj formula1 cident formula2 -> failure x
  Neg formula -> failure x
  Atom aident -> failure x
  Dir dir -> failure x
transBranch :: Branch -> Result
transBranch x = case x of
  OBranch aident aidents expwhere -> failure x
  PBranch aident aidents1 aidents2 expwhere -> failure x
transLabel :: Label -> Result
transLabel x = case x of
  OLabel aident teles -> failure x
  PLabel aident teles aidents system -> failure x
transTele :: Tele -> Result
transTele x = case x of
  Tele aident aidents exp -> failure x
transPTele :: PTele -> Result
transPTele x = case x of
  PTele exp1 exp2 -> failure x

